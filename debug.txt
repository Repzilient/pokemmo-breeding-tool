C:\Users\r3pzi\AppData\Local\Programs\Python\Python313\python.exe C:\Users\r3pzi\Desktop\PROVA\gui_breeder.py 

--- Inizio A* per Charizard {'ATK', 'DEF', 'PS'} Adamant (Maschio) ---
Pokémon Posseduti: ['Charizard (Charizard, Maschio) | N: Adamant, IVs: [PS] | ID: 0 | Fonte: Posseduto', 'Charizard (Charizard, Maschio) | N: NEUTRAL, IVs: [ATK, PS] | ID: 1 | Fonte: Posseduto']
[A*] Start Node aggiunto a Open List: Nodo(S:Charizard, IVs:{'ATK', 'DEF', 'PS'}, N:Adamant, g:inf, h:1.0, f:inf, d:0, UsedIDs:{}, Action:N/D)

[A* (1)] Nodo C estratto da Open List (0 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'DEF', 'PS'}, N:Adamant, g:inf, h:1.0, f:inf, d:0, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK', 'DEF', 'PS'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'DEF', 'PS'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:VigorCerchio)
    [GenOpts] Opzione valida 3: P1(Charizard, {'ATK', 'PS'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:VigorFascia)
    [GenOpts] Opzione valida 4: P1(Charizard, {'ATK', 'DEF'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:VigorPeso)
  [GenOpts] Trovate 4 opzioni uniche per ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorCerchio)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorFascia)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorPeso)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.

[A* (2)] Nodo C estratto da Open List (3 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'PS'}, N:Adamant, g:inf, h:0.0, f:inf, d:1, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK', 'PS'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'PS'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'PS'}, NEUTRAL, It:VigorCerchio)
    [GenOpts] Opzione valida 3: P1(Charizard, {'ATK'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'PS'}, NEUTRAL, It:VigorPeso)
  [GenOpts] Trovate 3 opzioni uniche per ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorCerchio)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'PS'}), 'Adamant') (key ('Charizard', frozenset({'PS'}), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorPeso)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.

[A* (3)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'PS'}, N:NEUTRAL, g:inf, h:0.0, f:inf, d:2, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) con g=0. Used: frozenset({1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'PS'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'PS'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) è una foglia, non espandere ulteriormente.

[A* (4)] Nodo C estratto da Open List (4 rimasti): Nodo(S:Charizard, IVs:{'ATK'}, N:Adamant, g:inf, h:0.0, f:inf, d:2, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'Adamant') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, set(), Adamant, It:Pietrastante) + P2(Charizard, {'ATK'}, NEUTRAL, It:VigorCerchio)
  [GenOpts] Trovate 2 opzioni uniche per ('Charizard', frozenset({'ATK'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': set(), 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorCerchio)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset(), 'Adamant') (key ('Charizard', frozenset(), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.

[A* (5)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'PS'}, N:Adamant, g:inf, h:0.0, f:inf, d:2, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'PS'}), 'Adamant') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0}))) con g=0. Used: frozenset({0})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) con g=0. Used: frozenset({1})
        [Propagate] Trovato percorso MIGLIORE per figlio C ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))): nuovo g=0 (vecchio g=inf). Used IDs: frozenset({0, 1})
          [Propagate] Aggiornato figlio C: Nodo(S:Charizard, IVs:{'ATK', 'PS'}, N:Adamant, g:0.0, h:3.0, f:3.0, d:1, UsedIDs:[0, 1], Action:bred)
          [Propagate] Nodo ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1})) aggiunto a open_list.
  [A*] Nodo ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0}))) è una foglia, non espandere ulteriormente.

[A* (6)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'PS'}, N:Adamant, g:0.0, h:3.0, f:3.0, d:1, UsedIDs:[0, 1], Action:bred)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) con g=0. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (g=0) deve essere generato (non è foglia). Espansione...
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorCerchio)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'PS'}), 'Adamant') (key ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorPeso)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.

[A* (7)] Nodo C estratto da Open List (7 rimasti): Nodo(S:Charizard, IVs:{}, N:Adamant, g:inf, h:0.0, f:inf, d:3, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset(), 'Adamant') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) con g=0. Used: frozenset({0})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) è una foglia, non espandere ulteriormente.

[A* (8)] Nodo C estratto da Open List (6 rimasti): Nodo(S:Charizard, IVs:{'ATK'}, N:NEUTRAL, g:inf, h:0.0, f:inf, d:3, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) con g=0. Used: frozenset({1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) con g=0. Used: frozenset({0})
        [Propagate] Trovato percorso MIGLIORE per figlio C ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))): nuovo g=0 (vecchio g=inf). Used IDs: frozenset({0, 1})
          [Propagate] Aggiornato figlio C: Nodo(S:Charizard, IVs:{'ATK'}, N:Adamant, g:0.0, h:2.0, f:2.0, d:2, UsedIDs:[0, 1], Action:bred)
  [A*] Nodo ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) è una foglia, non espandere ulteriormente.

[A* (9)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'DEF'}, N:Adamant, g:inf, h:1.0, f:inf, d:1, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK', 'DEF'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'DEF'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:VigorCerchio)
    [GenOpts] Opzione valida 3: P1(Charizard, {'ATK'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:VigorFascia)
  [GenOpts] Trovate 3 opzioni uniche per ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorCerchio)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.

[A* (10)] Nodo C estratto da Open List (6 rimasti): Nodo(S:Charizard, IVs:{'DEF', 'PS'}, N:Adamant, g:inf, h:1.0, f:inf, d:1, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'DEF', 'PS'}, Adamant, It:Pietrastante) + P2(Charizard, {'DEF', 'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'PS'}, Adamant, It:Pietrastante) + P2(Charizard, {'DEF', 'PS'}, NEUTRAL, It:VigorFascia)
    [GenOpts] Opzione valida 3: P1(Charizard, {'DEF'}, Adamant, It:Pietrastante) + P2(Charizard, {'DEF', 'PS'}, NEUTRAL, It:VigorPeso)
  [GenOpts] Trovate 3 opzioni uniche per ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorFascia)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'PS'}), 'Adamant') (key ('Charizard', frozenset({'PS'}), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) già in open_list_map. Non ri-aggiunto.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.

[A* (11)] Nodo C estratto da Open List (7 rimasti): Nodo(S:Charizard, IVs:{'ATK'}, N:Adamant, g:0.0, h:2.0, f:2.0, d:2, UsedIDs:[0, 1], Action:bred)
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK'}), 'Adamant') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) con g=0. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'Adamant', frozenset({0, 1}))) attuale g=0
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'Adamant') (g=0) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK'}, Adamant, It:Pietrastante) + P2(Charizard, {'ATK'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, set(), Adamant, It:Pietrastante) + P2(Charizard, {'ATK'}, NEUTRAL, It:VigorCerchio)
  [GenOpts] Trovate 2 opzioni uniche per ('Charizard', frozenset({'ATK'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': set(), 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorCerchio)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset(), 'Adamant') (key ('Charizard', frozenset(), 'Adamant', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.

[A* (12)] Nodo C estratto da Open List (8 rimasti): Nodo(S:Charizard, IVs:{'PS'}, N:Adamant, g:inf, h:0.0, f:inf, d:2, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'PS'}), 'Adamant') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0}))) con g=0. Used: frozenset({0})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0}))) è una foglia, non espandere ulteriormente.

[A* (13)] Nodo C estratto da Open List (7 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'DEF'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:2, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'DEF'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:VigorFascia) + P2(Charizard, {'ATK'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 3: P1(Charizard, {'ATK'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'DEF'}, NEUTRAL, It:VigorFascia)
    [GenOpts] Opzione valida 4: P1(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:None) + P2(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:None)
  [GenOpts] Trovate 4 opzioni uniche per ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (14)] Nodo C estratto da Open List (8 rimasti): Nodo(S:Charizard, IVs:{'ATK'}, N:NEUTRAL, g:inf, h:0.0, f:inf, d:3, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) con g=0. Used: frozenset({1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) è una foglia, non espandere ulteriormente.

[A* (15)] Nodo C estratto da Open List (7 rimasti): Nodo(S:Charizard, IVs:{}, N:Adamant, g:inf, h:1.0, f:inf, d:3, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) RISOLTO come 'bought_base', g_cost=1
  [A*] Nodo C ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset(), 'Adamant') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) con g=1. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) attuale g=0
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) è una foglia, non espandere ulteriormente.

[A* (16)] Nodo C estratto da Open List (6 rimasti): Nodo(S:Charizard, IVs:{'ATK'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:3, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) RISOLTO come 'bought_base', g_cost=1
  [A*] Nodo C ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) con g=1. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) attuale g=0
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) attuale g=0
        [Propagate] Altro genitore P_other (('Charizard', frozenset(), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) è una foglia, non espandere ulteriormente.

[A* (17)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'DEF'}, N:Adamant, g:inf, h:1.0, f:inf, d:2, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'Adamant') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'DEF'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'DEF'}, Adamant, It:Pietrastante) + P2(Charizard, {'DEF'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, set(), Adamant, It:Pietrastante) + P2(Charizard, {'DEF'}, NEUTRAL, It:VigorFascia)
  [GenOpts] Trovate 2 opzioni uniche per ('Charizard', frozenset({'DEF'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': set(), 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorFascia)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset())).
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset(), 'Adamant') (key ('Charizard', frozenset(), 'Adamant', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset())) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.

[A* (18)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{}, N:Adamant, g:inf, h:0.0, f:inf, d:3, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset(), 'Adamant') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) con g=0. Used: frozenset({0})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) è una foglia, non espandere ulteriormente.

[A* (19)] Nodo C estratto da Open List (4 rimasti): Nodo(S:Charizard, IVs:{'DEF'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:3, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) RISOLTO come 'bought_base', g_cost=1
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) con g=1. Used: frozenset()
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) con g=0. Used: frozenset({1})
        [Propagate] Trovato percorso MIGLIORE per figlio C ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))): nuovo g=1 (vecchio g=inf). Used IDs: frozenset({1})
          [Propagate] Aggiornato figlio C: Nodo(S:Charizard, IVs:{'ATK', 'DEF'}, N:NEUTRAL, g:1.0, h:2.0, f:3.0, d:2, UsedIDs:[1], Action:bred)
          [Propagate] Nodo ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1})) aggiunto a open_list.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) con g=0. Used: frozenset({0})
        [Propagate] Trovato percorso MIGLIORE per figlio C ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))): nuovo g=1 (vecchio g=inf). Used IDs: frozenset({0})
          [Propagate] Aggiornato figlio C: Nodo(S:Charizard, IVs:{'DEF'}, N:Adamant, g:1.0, h:2.0, f:3.0, d:2, UsedIDs:[0], Action:bred)
          [Propagate] Nodo ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0})) aggiunto a open_list.
  [A*] Nodo ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) è una foglia, non espandere ulteriormente.

[A* (20)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'DEF'}, N:NEUTRAL, g:1.0, h:2.0, f:3.0, d:2, UsedIDs:[1], Action:bred)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) con g=1. Used: frozenset({1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) con g=1. Used: frozenset()
        [Propagate] Percorso NON migliore per figlio C ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))): nuovo g=2, vecchio g=1.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (g=1) deve essere generato (non è foglia). Espansione...
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1}))).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1}))) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (21)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'DEF'}, N:Adamant, g:1.0, h:2.0, f:3.0, d:2, UsedIDs:[0], Action:bred)
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'DEF'}), 'Adamant') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) con g=1. Used: frozenset({0})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) con g=1. Used: frozenset({1})
        [Propagate] Trovato percorso MIGLIORE per figlio C ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))): nuovo g=2 (vecchio g=inf). Used IDs: frozenset({0, 1})
          [Propagate] Aggiornato figlio C: Nodo(S:Charizard, IVs:{'ATK', 'DEF'}, N:Adamant, g:2.0, h:3.0, f:5.0, d:1, UsedIDs:[0, 1], Action:bred)
          [Propagate] Nodo ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1})) aggiunto a open_list.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) con g=1. Used: frozenset()
        [Propagate] Percorso NON migliore per figlio C ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))): nuovo g=2, vecchio g=1.
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'Adamant') (g=1) deve essere generato (non è foglia). Espansione...
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) come figlio di ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))).
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': set(), 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) come figlio di ('Charizard', frozenset(), 'Adamant') (key ('Charizard', frozenset(), 'Adamant', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) già in open_list_map. Non ri-aggiunto.

[A* (22)] Nodo C estratto da Open List (6 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'DEF'}, N:Adamant, g:2.0, h:3.0, f:5.0, d:1, UsedIDs:[0, 1], Action:bred)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=2
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (g=2)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) con g=2. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (g=2) deve essere generato (non è foglia). Espansione...
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorCerchio)
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) a Open List.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'Adamant') (key ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'Adamant') (key: ('Charizard', frozenset({'ATK'}), 'Adamant', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.

[A* (23)] Nodo C estratto da Open List (7 rimasti): Nodo(S:Charizard, IVs:{'DEF'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:3, UsedIDs:[1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1}))) RISOLTO come 'bought_base', g_cost=1
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1}))) con g=1. Used: frozenset({1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) attuale g=1
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({1}))) attuale g=1
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({1}))) è una foglia, non espandere ulteriormente.

[A* (24)] Nodo C estratto da Open List (6 rimasti): Nodo(S:Charizard, IVs:{'DEF'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:3, UsedIDs:[0], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) RISOLTO come 'bought_base', g_cost=1
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) con g=1. Used: frozenset({0})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) attuale g=1
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0}))) attuale g=1
        [Propagate] Altro genitore P_other (('Charizard', frozenset(), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) è una foglia, non espandere ulteriormente.

[A* (25)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'DEF', 'PS'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:2, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')
    [GenOpts] Opzione valida 1: P1(Charizard, {'DEF', 'PS'}, NEUTRAL, It:VigorFascia) + P2(Charizard, {'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'DEF', 'PS'}, NEUTRAL, It:VigorPeso) + P2(Charizard, {'DEF'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 3: P1(Charizard, {'DEF'}, NEUTRAL, It:VigorFascia) + P2(Charizard, {'PS'}, NEUTRAL, It:VigorPeso)
    [GenOpts] Opzione valida 4: P1(Charizard, {'DEF', 'PS'}, NEUTRAL, It:None) + P2(Charizard, {'DEF', 'PS'}, NEUTRAL, It:None)
  [GenOpts] Trovate 4 opzioni uniche per ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorPeso,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (26)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'PS'}, N:NEUTRAL, g:inf, h:0.0, f:inf, d:3, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'PS'}), 'NEUTRAL') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0}))) con g=0. Used: frozenset({0})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) con g=1. Used: frozenset()
        [Propagate] Trovato percorso MIGLIORE per figlio C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))): nuovo g=1 (vecchio g=inf). Used IDs: frozenset({0})
          [Propagate] Aggiornato figlio C: Nodo(S:Charizard, IVs:{'DEF', 'PS'}, N:NEUTRAL, g:1.0, h:1.0, f:2.0, d:2, UsedIDs:[0], Action:bred)
          [Propagate] Nodo ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0})) aggiunto a open_list.
  [A*] Nodo ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0}))) è una foglia, non espandere ulteriormente.

[A* (27)] Nodo C estratto da Open List (5 rimasti): Nodo(S:Charizard, IVs:{'DEF', 'PS'}, N:NEUTRAL, g:1.0, h:1.0, f:2.0, d:2, UsedIDs:[0], Action:bred)
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) con g=1. Used: frozenset({0})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'PS'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) con g=1. Used: frozenset()
        [Propagate] Percorso NON migliore per figlio C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))): nuovo g=2, vecchio g=1.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (g=1) deve essere generato (non è foglia). Espansione...
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorPeso,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0})))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (28)] Nodo C estratto da Open List (4 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'DEF', 'PS'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:1, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'DEF', 'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:VigorFascia) + P2(Charizard, {'ATK', 'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 3: P1(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:VigorPeso) + P2(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 4: P1(Charizard, {'ATK', 'PS'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'DEF', 'PS'}, NEUTRAL, It:VigorFascia)
    [GenOpts] Opzione valida 5: P1(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'DEF', 'PS'}, NEUTRAL, It:VigorPeso)
    [GenOpts] Opzione valida 6: P1(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:VigorFascia) + P2(Charizard, {'ATK', 'PS'}, NEUTRAL, It:VigorPeso)
    [GenOpts] Opzione valida 7: P1(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:None) + P2(Charizard, {'ATK', 'DEF', 'PS'}, NEUTRAL, It:None)
  [GenOpts] Trovate 7 opzioni uniche per ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorPeso,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset())) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset()))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (29)] Nodo C estratto da Open List (4 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'PS'}, N:NEUTRAL, g:inf, h:0.0, f:inf, d:2, UsedIDs:{}, Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) RISOLTO come 'owned', g_cost=0
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) aggiunto/aggiornato in Closed List. g=0
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (g=0)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) con g=0. Used: frozenset({1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0}))) con g=1. Used: frozenset({0})
        [Propagate] Trovato percorso MIGLIORE per figlio C ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))): nuovo g=1 (vecchio g=inf). Used IDs: frozenset({0, 1})
          [Propagate] Aggiornato figlio C: Nodo(S:Charizard, IVs:{'ATK', 'DEF', 'PS'}, N:NEUTRAL, g:1.0, h:3.0, f:4.0, d:1, UsedIDs:[0, 1], Action:bred)
          [Propagate] Nodo ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})) aggiunto a open_list.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({1}))) è una foglia, non espandere ulteriormente.

[A* (30)] Nodo C estratto da Open List (4 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'DEF', 'PS'}, N:NEUTRAL, g:1.0, h:3.0, f:4.0, d:1, UsedIDs:[0, 1], Action:bred)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) con g=1. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'PS'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'Adamant', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset())) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (g=1) deve essere generato (non è foglia). Espansione...
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorPeso,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (31)] Nodo C estratto da Open List (4 rimasti): Nodo(S:Charizard, IVs:{'DEF'}, N:Adamant, g:inf, h:2.0, f:inf, d:2, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'Adamant') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'DEF'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'DEF'}, Adamant, It:Pietrastante) + P2(Charizard, {'DEF'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, set(), Adamant, It:Pietrastante) + P2(Charizard, {'DEF'}, NEUTRAL, It:VigorFascia)
  [GenOpts] Trovate 2 opzioni uniche per ('Charizard', frozenset({'DEF'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': set(), 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset(), 'Adamant') (key ('Charizard', frozenset(), 'Adamant', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF'}), 'Adamant') (key ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.

[A* (32)] Nodo C estratto da Open List (4 rimasti): Nodo(S:Charizard, IVs:{'DEF'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:3, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) RISOLTO come 'bought_base', g_cost=1
  [A*] Nodo C ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) con g=1. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF'}), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF'}), 'Adamant') (key: ('Charizard', frozenset({'DEF'}), 'Adamant', frozenset({0, 1}))) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset(), 'Adamant')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è una foglia, non espandere ulteriormente.

[A* (33)] Nodo C estratto da Open List (3 rimasti): Nodo(S:Charizard, IVs:{'DEF', 'PS'}, N:NEUTRAL, g:inf, h:2.0, f:inf, d:2, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')
    [GenOpts] Opzione valida 1: P1(Charizard, {'DEF', 'PS'}, NEUTRAL, It:VigorFascia) + P2(Charizard, {'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'DEF', 'PS'}, NEUTRAL, It:VigorPeso) + P2(Charizard, {'DEF'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 3: P1(Charizard, {'DEF'}, NEUTRAL, It:VigorFascia) + P2(Charizard, {'PS'}, NEUTRAL, It:VigorPeso)
    [GenOpts] Opzione valida 4: P1(Charizard, {'DEF', 'PS'}, NEUTRAL, It:None) + P2(Charizard, {'DEF', 'PS'}, NEUTRAL, It:None)
  [GenOpts] Trovate 4 opzioni uniche per ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Creato NUOVO genitore P istanza ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))).
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Aggiungo genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) a Open List.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorPeso,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in open_list_map.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) già in open_list_map. Non ri-aggiunto.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (34)] Nodo C estratto da Open List (3 rimasti): Nodo(S:Charizard, IVs:{'PS'}, N:NEUTRAL, g:inf, h:1.0, f:inf, d:3, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) RISOLTO come 'bought_base', g_cost=1
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=1
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'PS'}), 'NEUTRAL') (g=1)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) con g=1. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) attuale g=inf
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) attuale g=inf
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) con g=1. Used: frozenset()
        [Propagate] Trovato percorso MIGLIORE per figlio C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))): nuovo g=2 (vecchio g=inf). Used IDs: frozenset({0, 1})
          [Propagate] Aggiornato figlio C: Nodo(S:Charizard, IVs:{'DEF', 'PS'}, N:NEUTRAL, g:2.0, h:2.0, f:4.0, d:2, UsedIDs:[0, 1], Action:bred)
          [Propagate] Rimosso ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})) da closed_list per riapertura.
          [Propagate] Nodo ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1})) aggiunto a open_list.
  [A*] Nodo ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) è una foglia, non espandere ulteriormente.

[A* (35)] Nodo C estratto da Open List (3 rimasti): Nodo(S:Charizard, IVs:{'DEF', 'PS'}, N:NEUTRAL, g:2.0, h:2.0, f:4.0, d:2, UsedIDs:[0, 1], Action:bred)
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=2
  [A*] Propagazione aggiornamento costo da NODO ORA IN CLOSED ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (g=2)
    [Propagate] Genitore Risolto P: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) con g=2. Used: frozenset({0, 1})
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) attuale g=1
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) attuale g=1
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) attuale g=1
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) attuale g=2
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) attuale g=2
        [Propagate] Trovato altro genitore P_other risolto: ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset())) con g=1. Used: frozenset()
        [Propagate] Percorso NON migliore per figlio C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))): nuovo g=3, vecchio g=2.
      [Propagate] Considerando figlio C (ref originale): ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) attuale g=2
        [Propagate] Altro genitore P_other (('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL')) non ancora risolto/compatibile in closed_list. Salto aggiornamento per C.
  [A*] Nodo C ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (g=2) deve essere generato (non è foglia). Espansione...
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorPeso,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF', 'PS'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (36)] Nodo C estratto da Open List (2 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'DEF'}, N:NEUTRAL, g:inf, h:2.0, f:inf, d:2, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'DEF'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:VigorFascia) + P2(Charizard, {'ATK'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 3: P1(Charizard, {'ATK'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'DEF'}, NEUTRAL, It:VigorFascia)
    [GenOpts] Opzione valida 4: P1(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:None) + P2(Charizard, {'ATK', 'DEF'}, NEUTRAL, It:None)
  [GenOpts] Trovate 4 opzioni uniche per ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, Items=(VigorFascia,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'DEF'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,VigorFascia)
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'DEF'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'DEF'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (37)] Nodo C estratto da Open List (1 rimasti): Nodo(S:Charizard, IVs:{'PS'}, N:Adamant, g:inf, h:2.0, f:inf, d:2, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'PS'}), 'Adamant') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'PS'}), 'Adamant')
    [GenOpts] Opzione valida 1: P1(Charizard, {'PS'}, Adamant, It:Pietrastante) + P2(Charizard, {'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, set(), Adamant, It:Pietrastante) + P2(Charizard, {'PS'}, NEUTRAL, It:VigorPeso)
  [GenOpts] Trovate 2 opzioni uniche per ('Charizard', frozenset({'PS'}), 'Adamant')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,None)
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'PS'}), 'Adamant') (key ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'PS'}), 'Adamant') (key ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'Adamant') (key: ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'PS'}), 'Adamant') (key ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': set(), 'nature': 'Adamant'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(Pietrastante,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'PS'}), 'Adamant') (key ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset(), 'Adamant') (key ('Charizard', frozenset(), 'Adamant', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset(), 'Adamant') (key: ('Charizard', frozenset(), 'Adamant', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'PS'}), 'Adamant') (key ('Charizard', frozenset({'PS'}), 'Adamant', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.

[A* (38)] Nodo C estratto da Open List (0 rimasti): Nodo(S:Charizard, IVs:{'ATK', 'PS'}, N:NEUTRAL, g:inf, h:2.0, f:inf, d:2, UsedIDs:[0, 1], Action:N/D)
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) aggiunto/aggiornato in Closed List. g=inf
  [A*] Nodo C ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (g=inf) deve essere generato (non è foglia). Espansione...
  [GenOpts] Generazione opzioni per figlio: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL')
    [GenOpts] Opzione valida 1: P1(Charizard, {'ATK', 'PS'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'PS'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 2: P1(Charizard, {'ATK', 'PS'}, NEUTRAL, It:VigorPeso) + P2(Charizard, {'ATK'}, NEUTRAL, It:None)
    [GenOpts] Opzione valida 3: P1(Charizard, {'ATK'}, NEUTRAL, It:VigorCerchio) + P2(Charizard, {'PS'}, NEUTRAL, It:VigorPeso)
    [GenOpts] Opzione valida 4: P1(Charizard, {'ATK', 'PS'}, NEUTRAL, It:None) + P2(Charizard, {'ATK', 'PS'}, NEUTRAL, It:None)
  [GenOpts] Trovate 4 opzioni uniche per ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL')
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, Items=(VigorPeso,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'PS'}, 'nature': 'NEUTRAL'}, Items=(VigorCerchio,VigorPeso)
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
    [A*] Opzione per C: P1_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, P2_spec={'species': 'Charizard', 'ivs': {'ATK', 'PS'}, 'nature': 'NEUTRAL'}, Items=(None,None)
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
        -> Registrato ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) come figlio di ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1})))
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) trovato in closed_list.
      [A*] Genitore P ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL') (key: ('Charizard', frozenset({'ATK', 'PS'}), 'NEUTRAL', frozenset({0, 1}))) è in closed_list con costo migliore/uguale. Non aggiunto a Open.
[A*] Fine ricerca. Nodi processati: 38. Open list vuota o max nodi raggiunti.
[A*] Target finale non trovato con costo finito.
